// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/DkreativeCoders/dmessanger-service/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// ICustomerRepository is an autogenerated mock type for the ICustomerRepository type
type ICustomerRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields:
func (_m *ICustomerRepository) FindAll() []domain.Customer {
	ret := _m.Called()

	var r0 []domain.Customer
	if rf, ok := ret.Get(0).(func() []domain.Customer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Customer)
		}
	}

	return r0
}

// FindByEmail provides a mock function with given fields: email
func (_m *ICustomerRepository) FindByEmail(email string) (*domain.Customer, error) {
	ret := _m.Called(email)

	var r0 *domain.Customer
	if rf, ok := ret.Get(0).(func(string) *domain.Customer); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *ICustomerRepository) FindByID(id int) (*domain.Customer, error) {
	ret := _m.Called(id)

	var r0 *domain.Customer
	if rf, ok := ret.Get(0).(func(int) *domain.Customer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserId provides a mock function with given fields: customerId
func (_m *ICustomerRepository) FindByUserId(customerId int) (*domain.Customer, error) {
	ret := _m.Called(customerId)

	var r0 *domain.Customer
	if rf, ok := ret.Get(0).(func(int) *domain.Customer); ok {
		r0 = rf(customerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(customerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: customer
func (_m *ICustomerRepository) Save(customer domain.Customer) (*domain.Customer, error) {
	ret := _m.Called(customer)

	var r0 *domain.Customer
	if rf, ok := ret.Get(0).(func(domain.Customer) *domain.Customer); ok {
		r0 = rf(customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Customer) error); ok {
		r1 = rf(customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: customer
func (_m *ICustomerRepository) Update(customer domain.Customer) (*domain.Customer, error) {
	ret := _m.Called(customer)

	var r0 *domain.Customer
	if rf, ok := ret.Get(0).(func(domain.Customer) *domain.Customer); ok {
		r0 = rf(customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Customer) error); ok {
		r1 = rf(customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

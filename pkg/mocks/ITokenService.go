// Code generated by mockery v2.0.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/DkreativeCoders/dmessanger-service/pkg/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ITokenService is an autogenerated mock type for the ITokenService type
type ITokenService struct {
	mock.Mock
}

// CreateTokenWithExpirationInHours provides a mock function with given fields: userID, uniqueID, otp, expirationTimeInHour
func (_m *ITokenService) CreateTokenWithExpirationInHours(userID uint, uniqueID string, otp string, expirationTimeInHour time.Duration) (*domain.Token, error) {
	ret := _m.Called(userID, uniqueID, otp, expirationTimeInHour)

	var r0 *domain.Token
	if rf, ok := ret.Get(0).(func(uint, string, string, time.Duration) *domain.Token); ok {
		r0 = rf(userID, uniqueID, otp, expirationTimeInHour)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string, string, time.Duration) error); ok {
		r1 = rf(userID, uniqueID, otp, expirationTimeInHour)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTokenWithExpirationInMinutes provides a mock function with given fields: userID, uniqueID, otp, expirationTimeInMinutes
func (_m *ITokenService) CreateTokenWithExpirationInMinutes(userID uint, uniqueID string, otp string, expirationTimeInMinutes time.Duration) (*domain.Token, error) {
	ret := _m.Called(userID, uniqueID, otp, expirationTimeInMinutes)

	var r0 *domain.Token
	if rf, ok := ret.Get(0).(func(uint, string, string, time.Duration) *domain.Token); ok {
		r0 = rf(userID, uniqueID, otp, expirationTimeInMinutes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string, string, time.Duration) error); ok {
		r1 = rf(userID, uniqueID, otp, expirationTimeInMinutes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

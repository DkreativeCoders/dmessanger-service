// Code generated by mockery v2.0.3. DO NOT EDIT.

package mocks

import (
	mail "github.com/DkreativeCoders/dmessanger-service/pkg/config/mail"
	mock "github.com/stretchr/testify/mock"
)

// IMail is an autogenerated mock type for the IMail type
type IMail struct {
	mock.Mock
}

// SendEMail provides a mock function with given fields: email
func (_m *IMail) SendEMail(email mail.EMailMessage) (string, error) {
	ret := _m.Called(email)

	var r0 string
	if rf, ok := ret.Get(0).(func(mail.EMailMessage) string); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(mail.EMailMessage) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMail provides a mock function with given fields: subject, text, to
func (_m *IMail) SendMail(subject string, text string, to ...string) (string, error) {
	_va := make([]interface{}, len(to))
	for _i := range to {
		_va[_i] = to[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, subject, text)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, ...string) string); ok {
		r0 = rf(subject, text, to...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...string) error); ok {
		r1 = rf(subject, text, to...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMailWithHtMlTemplate provides a mock function with given fields:
func (_m *IMail) SendMailWithHtMlTemplate() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

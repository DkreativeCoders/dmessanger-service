// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/DkreativeCoders/dmessanger-service/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// ITokenRepository is an autogenerated mock type for the ITokenRepository type
type ITokenRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: token
func (_m *ITokenRepository) Create(token domain.Token) (*domain.Token, error) {
	ret := _m.Called(token)

	var r0 *domain.Token
	if rf, ok := ret.Get(0).(func(domain.Token) *domain.Token); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByToken provides a mock function with given fields: tk
func (_m *ITokenRepository) FindByToken(tk string) (*domain.Token, error) {
	ret := _m.Called(tk)

	var r0 *domain.Token
	if rf, ok := ret.Get(0).(func(string) *domain.Token); ok {
		r0 = rf(tk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserId provides a mock function with given fields: userId
func (_m *ITokenRepository) FindByUserId(userId int) (*domain.Customer, error) {
	ret := _m.Called(userId)

	var r0 *domain.Customer
	if rf, ok := ret.Get(0).(func(int) *domain.Customer); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
